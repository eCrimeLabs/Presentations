#1456511496867;1456511498880;2013;188.114.131.15;37.205.120.5;chargen;19;amplification;1;74;74;;0
filter {  
   if [message] !~ /^[0-9]{10,}/ {
      drop{}
   }
   ## ----- CSV PROCESSING --------
   csv {
      columns => ["start_ts","stop_ts","resp_time_ms","src_ip","dst_ip","proto","dst_port","attack_desc","sent_bytes","recv_bytes","amp_factor","domain","real_attack"]
      separator => ","
   }

   mutate {convert => ["resp_time_ms", "float"]}
   mutate {convert => ["proto", "string"]}
   mutate {convert => ["dst_port", "string"]}
   mutate {convert => ["attack_desc", "string"]}
   mutate {convert => ["sent_bytes", "integer"]}
   mutate {convert => ["recv_bytes", "integer"]}
   mutate {convert => ["amp_factor", "integer"]}


   # If entry has an amplification factor of 0 or 1.
   if [amp_factor] == 0 { drop{} }
   if [amp_factor] == 1 { drop{} }

   if [proto] == "ntp" and [amp_factor] >= 2450 { drop {} }           		# amp_factor:[2450 TO *] AND proto:ntp    
   if [attack_desc] == "ntp - readvar" and [amp_factor] >= 200 { drop {} }      # amp_factor:[201 TO *] AND attack_desc:ntp - readvar
   if [proto] == "portmap" and [amp_factor] >= 250 { drop {} }        		# amp_factor:[250 TO *] AND proto:portmap 
   if [proto] == "mssql" and [amp_factor] >= 2500 { drop {} }         		# amp_factor:[2500 TO *] AND proto:mssql  
   if [proto] == "netbios" and [amp_factor] >= 300 { drop {} }        		# amp_factor:[300 TO *] AND proto:netbios 
   if [proto] == "ssdp" and [amp_factor] >= 1000 { drop {} }          		# amp_factor:[1000 TO *] AND proto:ssdp   
   if [proto] == "chargen" and [amp_factor] >= 7000 { drop {} }       		# amp_factor:[7000 TO *] AND proto:chargen
   if [proto] == "qotd" and [amp_factor] >= 600 { drop {} }           		# amp_factor:[600 TO *] AND proto:qotd
   if [proto] == "rip" and [amp_factor] >= 500 { drop {} }            		# amp_factor:[500 TO *] AND proto:rip
   if [proto] == "icabrowser" and [amp_factor] >= 600 { drop {} }     		# amp_factor:[600 TO *] AND proto:icabrowser
   if [proto] == "sentinel" and [amp_factor] >= 700 { drop {} }       		# amp_factor:[700 TO *] AND proto:sentinel
   if [proto] == "quake3" and [amp_factor] >= 100 { drop {} }         		# amp_factor:[100 TO *] AND proto:quake3
   if [proto] == "snmp" and [amp_factor] >= 570 { drop {} }           		# amp_factor:[570 TO *] AND proto:snmp
   if [proto] == "coap" and [amp_factor] >= 100 { drop {} }           		# amp_factor:[100 TO *] AND proto:coap
   if [proto] == "dns" and [amp_factor] >= 200 { drop {} }            		# amp_factor:[200 TO *] AND proto:dns
   if [proto] == "mdns" and [amp_factor] >= 50 { drop {} }            		# amp_factor:[50 TO *] AND proto:mdns
   if [proto] == "sip" and [amp_factor] >= 20 { drop {} }             		# amp_factor:[20 TO *] AND proto:sip    
   if [proto] == "ldap" and [amp_factor] >= 100 { drop {} }           		# amp_factor:[100 TO *] AND proto:ldap
   if [proto] == "tftp" and [amp_factor] >= 100 { drop {} }                     # amp_factor:[100 TO *] AND proto:tftp
   if [proto] == "steam" and [amp_factor] >= 200 { drop {} }                    # amp_factor:[200 TO *] AND proto:steam
   if [proto] == "memcached" and [amp_factor] >= 500 {drop {} }                 # amp_factor:[500 TO *] AND proto:memcached
   

   ## Convert real_attack to a Boolean
   mutate {
      gsub => [
         "real_attack", "1", "true",
         "real_attack", "0", "false"
      ]
   }
   mutate {convert => ["real_attack", "boolean"]}

   ## Date and time field
   date {
      match => [ "start_ts", "UNIX_MS" ]
      timezone => "UTC"
   }
   date {
      match => [ "stop_ts", "UNIX_MS" ]
      timezone => "UTC"
   }

   mutate {convert => ["start_ts", "integer"]}
   mutate {convert => ["stop_ts", "integer"]}
   

   ## Source IP Geo settings
   geoip {
      source => "src_ip"
      target => "src_geoip"
      database => "/opt/logstash/config/databases/GeoLiteCity.dat"
      lru_cache_size => 10000
      add_field => [ "[src_geoip][coordinates]", "%{[src_geoip][longitude]}" ]
      add_field => [ "[src_geoip][coordinates]", "%{[src_geoip][latitude]}"  ]
   }

   mutate {
      convert => [ "[src_geoip][coordinates]", "float" ]
   }

   if [src_geoip][country_code2]  == "" { mutate { remove_field => "[src_geoip][country_code2]" } }
   if [src_geoip][country_name]   == "" { mutate { remove_field => "[src_geoip][country_name]" } }
   if [src_geoip][latitude]       == "" { mutate { remove_field => "[src_geoip][latitude]" } }
   if [src_geoip][longitude]      == "" { mutate { remove_field => "[src_geoip][longitude]" } }

   geoip {
      target => "src_whois"
      lru_cache_size => 10000
      source => "src_ip"
      database => "/opt/logstash/config/databases/GeoIPASNum.dat"
   }

   ## Destination IP Geo settings
   geoip {
      source => "dst_ip"
      target => "dst_geoip"
      database => "/opt/logstash/config/databases/GeoLiteCity.dat"
      lru_cache_size => 10000
      add_field => [ "[dst_geoip][coordinates]", "%{[dst_geoip][longitude]}" ]
      add_field => [ "[dst_geoip][coordinates]", "%{[dst_geoip][latitude]}"  ]
   }

   mutate {
      convert => [ "[dst_geoip][coordinates]", "float" ]
   }

   if [dst_geoip][country_code2]  == "" { mutate { remove_field => "[dst_geoip][country_code2]" } }
   if [dst_geoip][country_name]   == "" { mutate { remove_field => "[dst_geoip][country_name]" } }
   if [dst_geoip][latitude]       == "" { mutate { remove_field => "[dst_geoip][latitude]" } }
   if [dst_geoip][longitude]      == "" { mutate { remove_field => "[dst_geoip][longitude]" } }

   geoip {
      target => "dst_whois"
      lru_cache_size => 10000
      source => "dst_ip"
      database => "/opt/logstash/config/databases/GeoIPASNum.dat"
   }

   ## way to be able to do top N terms queries on flows, not just on one field.
   if [src_ip] and [dst_ip] {
       fingerprint {
          concatenate_sources => true
          method => "MD5"
          key => "dadosmon"
          source => [ "dst_ip", "dst_port", "proto", "attack_desc" ]
       }
   }

   ## Cleanup unused fields
   mutate {
      remove_field => [ "real_attack" ]
      remove_field => [ "path" ]
      remove_field => [ "message" ]
      remove_field => [ "@version" ]
      remove_field => [ "host" ]
      
      remove_field => "[dst_geoip][postal_code]"
      remove_field => "[dst_geoip][region_name]"
      remove_field => "[dst_geoip][real_region_name]"
      remove_field => "[dst_geoip][timezone]"
      remove_field => "[dst_geoip][continent_code]"
      remove_field => "[dst_geoip][city_name]"
      remove_field => "[dst_geoip][country_code3]"
      remove_field => "[dst_geoip][ip]"

      remove_field => "[src_geoip][postal_code]"
      remove_field => "[src_geoip][region_name]"
      remove_field => "[src_geoip][real_region_name]"
      remove_field => "[src_geoip][timezone]"
      remove_field => "[src_geoip][continent_code]"
      remove_field => "[src_geoip][city_name]"
      remove_field => "[src_geoip][country_code3]"
      remove_field => "[src_geoip][ip]"
   }
}

